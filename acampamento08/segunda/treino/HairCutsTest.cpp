#define TEST

#include "HairCuts.cpp"
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <stdio.h>
#include <time.h>
using namespace std;



class HairCutsTest {

	public: static bool passed;
	
	    static int cmp (double a, double b = 0.0, double tol = 1e-9) {
       if (a <= b + tol) {
          if (a + tol < b) return -1;
          return 0;
       }
       return 1;
    }

    static void assertEquals(int testCase, const double& expected, const double& actual) {
        if (cmp (expected * (1 + 1e-9), actual) >= 0 && cmp (expected * (1 - 1e-9), actual) <= 0) {
        	passed = true;
            cout << "Test case " << testCase << " PASSED!";
        } else {
        	passed = false;
            cout << "Test case " << testCase << " FAILED! Expected: <" << expected << "> but was: <" << actual << '>';
        }
    }


    HairCuts solution;
    
    

void testCase0 () {
string _var0[] = {"04:22","09:00"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:52";

double ret = 90.0;

assertEquals(0, ret, solution.maxCut(var0, var1));
}

void testCase1 () {
string _var0[] = {"09:00","09:22","09:22"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "10:11";

double ret = 23.666666666666863;

assertEquals(1, ret, solution.maxCut(var0, var1));
}

void testCase2 () {
string _var0[] = {"09:00","04:00","04:02"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "04:09";

double ret = -1.0;

assertEquals(2, ret, solution.maxCut(var0, var1));
}

void testCase3 () {
string _var0[] = {"09:00","09:00","09:00","09:00","09:00","09:00","09:00","09:00","09:37"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "11:21";

double ret = 15.666666666666893;

assertEquals(3, ret, solution.maxCut(var0, var1));
}

void testCase4 () {
string _var0[] = {"04:59"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:58";

double ret = 119.0;

assertEquals(4, ret, solution.maxCut(var0, var1));
}

void testCase5 () {
string _var0[] = {"01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:10";

double ret = 5.0;

assertEquals(5, ret, solution.maxCut(var0, var1));
}

void testCase6 () {
string _var0[] = {"01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:09";

double ret = -1.0;

assertEquals(6, ret, solution.maxCut(var0, var1));
}

void testCase7 () {
string _var0[] = {"01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00","01:00"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:11";

double ret = 5.0199999999997775;

assertEquals(7, ret, solution.maxCut(var0, var1));
}

void testCase8 () {
string _var0[] = {"04:44","09:22"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:00";

double ret = 16.0;

assertEquals(8, ret, solution.maxCut(var0, var1));
}

void testCase9 () {
string _var0[] = {"09:44","09:32"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "10:00";

double ret = 14.0;

assertEquals(9, ret, solution.maxCut(var0, var1));
}

void testCase10 () {
string _var0[] = {"09:44","09:32","09:33"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "10:00";

double ret = 9.333333333333583;

assertEquals(10, ret, solution.maxCut(var0, var1));
}

void testCase11 () {
string _var0[] = {"09:44","09:42","09:33"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "10:00";

double ret = 9.0;

assertEquals(11, ret, solution.maxCut(var0, var1));
}

void testCase12 () {
string _var0[] = {"09:44","09:42","09:33"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "09:59";

double ret = 8.500000000000252;

assertEquals(12, ret, solution.maxCut(var0, var1));
}

void testCase13 () {
string _var0[] = {"09:44","09:42","09:33"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "10:01";

double ret = 9.333333333333583;

assertEquals(13, ret, solution.maxCut(var0, var1));
}

void testCase14 () {
string _var0[] = {"04:55","04:50","04:45","04:40","04:35","04:30","04:25","04:20","04:15","04:10","04:05","04:00","03:55"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:00";

double ret = 5.0;

assertEquals(14, ret, solution.maxCut(var0, var1));
}

void testCase15 () {
string _var0[] = {"04:55","04:50","04:45","04:40","04:35","04:30","04:25","04:20","04:15","04:10","04:05","04:00","03:56"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:00";

double ret = -1.0;

assertEquals(15, ret, solution.maxCut(var0, var1));
}

void testCase16 () {
string _var0[] = {"10:10"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "10:14";

double ret = -1.0;

assertEquals(16, ret, solution.maxCut(var0, var1));
}

void testCase17 () {
string _var0[] = {"01:15"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:46";

double ret = 271.0;

assertEquals(17, ret, solution.maxCut(var0, var1));
}

void testCase18 () {
string _var0[] = {"11:16","11:18"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "01:53";

double ret = 78.5;

assertEquals(18, ret, solution.maxCut(var0, var1));
}

void testCase19 () {
string _var0[] = {"09:52","11:23","12:08"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "04:51";

double ret = 139.66666666666643;

assertEquals(19, ret, solution.maxCut(var0, var1));
}

void testCase20 () {
string _var0[] = {"11:56","01:58","11:44","10:34"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:55";

double ret = 125.24999999999984;

assertEquals(20, ret, solution.maxCut(var0, var1));
}

void testCase21 () {
string _var0[] = {"09:33","09:57","03:36","10:52","12:12"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:43";

double ret = 110.0;

assertEquals(21, ret, solution.maxCut(var0, var1));
}

void testCase22 () {
string _var0[] = {"12:17","11:51","10:47","09:29","01:48","04:50"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:03";

double ret = 13.0;

assertEquals(22, ret, solution.maxCut(var0, var1));
}

void testCase23 () {
string _var0[] = {"09:44","02:41","12:21","02:08","12:09","12:37","09:43"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "04:42";

double ret = 54.599999999999774;

assertEquals(23, ret, solution.maxCut(var0, var1));
}

void testCase24 () {
string _var0[] = {"10:25","09:05","11:17","02:39","02:44","09:21","04:46","11:15"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:48";

double ret = 72.87499999999976;

assertEquals(24, ret, solution.maxCut(var0, var1));
}

void testCase25 () {
string _var0[] = {"04:40","10:54","12:30","03:46","04:48","01:57","04:47","10:29","10:39"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:21";

double ret = 13.6666666666669;

assertEquals(25, ret, solution.maxCut(var0, var1));
}

void testCase26 () {
string _var0[] = {"11:23","12:22","01:09","09:39","10:38","01:26","02:58","11:45","04:17","04:14"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:05";

double ret = 25.500000000000192;

assertEquals(26, ret, solution.maxCut(var0, var1));
}

void testCase27 () {
string _var0[] = {"04:25","09:16","12:48","01:02","04:30","10:43","02:39","11:49","09:23","03:40","11:51"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "04:35";

double ret = 5.0;

assertEquals(27, ret, solution.maxCut(var0, var1));
}

void testCase28 () {
string _var0[] = {"01:29","04:49","12:43","01:51","11:34","12:17","11:54","01:24","10:22","04:33","09:48","01:17"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:57";

double ret = 44.30000000000023;

assertEquals(28, ret, solution.maxCut(var0, var1));
}

void testCase29 () {
string _var0[] = {"12:15","11:42","12:35","09:53","12:55","10:16","03:40","02:38","10:54","04:40","02:45","09:51","09:16"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:08";

double ret = 40.923076923077055;

assertEquals(29, ret, solution.maxCut(var0, var1));
}

void testCase30 () {
string _var0[] = {"02:50","11:59","04:39","09:53","09:22","12:50","10:18","10:11","09:28","04:51","09:24","03:13","09:56","09:31"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:08";

double ret = 14.500000000000231;

assertEquals(30, ret, solution.maxCut(var0, var1));
}

void testCase31 () {
string _var0[] = {"02:23","10:33","09:04","10:27","02:30","01:59","02:32","01:39","04:28","02:40","03:52","11:00","03:23","01:44","04:13"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:11";

double ret = 19.272727272727387;

assertEquals(31, ret, solution.maxCut(var0, var1));
}

void testCase32 () {
string _var0[] = {"12:01","11:01","04:22","03:50","01:56","04:54","04:44","10:35","10:39","12:16","09:19","10:53","03:58","10:28","04:31","02:11"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:28";

double ret = 16.333333333333556;

assertEquals(32, ret, solution.maxCut(var0, var1));
}

void testCase33 () {
string _var0[] = {"09:48","09:24","01:19","09:21","09:08","10:34","12:11","04:29","01:41","03:40","02:25","04:15","02:20","11:56","04:10","02:56","12:10"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:12";

double ret = 31.333333333333506;

assertEquals(33, ret, solution.maxCut(var0, var1));
}

void testCase34 () {
string _var0[] = {"11:42","12:04","01:41","03:56","11:54","02:27","01:15","02:56","01:36","04:05","04:38","01:01","01:44","02:50","03:23","03:12","04:04","10:27"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:42";

double ret = 24.3571428571426;

assertEquals(34, ret, solution.maxCut(var0, var1));
}

void testCase35 () {
string _var0[] = {"11:08","01:22","10:08","12:46","10:38","04:26","02:15","01:26","10:06","04:39","04:30","03:40","04:20","12:51","11:33","02:41","04:05","02:18","10:43"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "04:44";

double ret = 5.0;

assertEquals(35, ret, solution.maxCut(var0, var1));
}

void testCase36 () {
string _var0[] = {"01:45","10:41","03:23","02:08","04:26","10:39","02:02","01:29","11:54","03:37","09:36","01:25","02:57","03:08","04:57","02:40","12:50","04:03","01:59","10:00"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:37";

double ret = 18.0;

assertEquals(36, ret, solution.maxCut(var0, var1));
}

void testCase37 () {
string _var0[] = {"04:41","10:38","03:44","09:56","11:20","12:11","03:11","01:15","09:52","03:14","04:56","12:29","02:59","04:19","11:32","12:40","10:21","01:43","11:07","09:57","03:45"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:37";

double ret = 19.750000000000213;

assertEquals(37, ret, solution.maxCut(var0, var1));
}

void testCase38 () {
string _var0[] = {"09:54","04:30","03:26","12:11","03:43","09:16","10:08","12:03","04:24","01:05","12:03","09:57","04:41","09:19","12:03","10:35","03:47","03:47","12:30","12:21","03:30","01:38"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:57";

double ret = 25.87499999999993;

assertEquals(38, ret, solution.maxCut(var0, var1));
}

void testCase39 () {
string _var0[] = {"09:36","01:43","04:30","03:00","02:13","01:09","12:52","09:03","09:48","01:43","03:34","03:23","02:20","12:46","02:08","03:49","11:28","02:00","12:09","09:45","04:55","04:59","11:04"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:26";

double ret = 15.500000000000227;

assertEquals(39, ret, solution.maxCut(var0, var1));
}

void testCase40 () {
string _var0[] = {"10:47","12:50","02:56","11:06","02:39","03:42","12:10","01:01","03:20","01:50","03:57","12:58","01:44","01:13","11:57","10:00","09:23","02:48","04:45","11:19","12:29","04:33","09:06","04:37"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:00";

double ret = 9.0;

assertEquals(40, ret, solution.maxCut(var0, var1));
}

void testCase41 () {
string _var0[] = {"09:50","12:21","10:56","11:35","12:27","09:40","01:58","12:05","02:22","01:43","02:48","03:33","02:58","01:14","09:33","03:43","04:12","09:16","09:06","02:43","02:38","10:42","09:04","01:41","01:45"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "04:16";

double ret = -1.0;

assertEquals(41, ret, solution.maxCut(var0, var1));
}

void testCase42 () {
string _var0[] = {"09:42","11:49","10:37","01:41","11:01","12:57","01:32","11:54","09:47","10:50","02:53","10:48","10:30","04:24","01:33","10:19","09:14","12:11","12:15","10:14","01:34","02:15","09:40","12:44","01:05","12:42"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "04:59";

double ret = 17.559999999999818;

assertEquals(42, ret, solution.maxCut(var0, var1));
}

void testCase43 () {
string _var0[] = {"12:40","03:22","10:14","01:18","12:58","02:53","09:26","02:13","03:59","01:29","01:34","02:00","03:23","12:46","12:19","12:04","11:02","04:28","12:20","04:49","09:20","12:06","11:48","02:04","02:42","12:22","12:21"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:14";

double ret = 16.782608695652215;

assertEquals(43, ret, solution.maxCut(var0, var1));
}

void testCase44 () {
string _var0[] = {"01:23","12:42","02:59","01:09","01:55","04:12","01:14","04:11","11:52","12:31","12:36","11:58","01:38","02:29","01:39","10:12","09:17","01:01","03:20","02:45","12:51","11:38","04:45","09:52","10:35","11:43","03:49","03:06"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:40";

double ret = 15.083333333333561;

assertEquals(44, ret, solution.maxCut(var0, var1));
}

void testCase45 () {
string _var0[] = {"09:43","12:30","03:34","09:24","01:21","12:48","02:08","03:19","10:00","10:13","01:24","02:45","01:20","02:13","04:12","02:28","02:04","11:56","12:22","01:39","01:49","03:22","11:15","09:07","03:17","10:48","09:48","04:31","04:42"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:04";

double ret = 13.176470588235249;

assertEquals(45, ret, solution.maxCut(var0, var1));
}

void testCase46 () {
string _var0[] = {"03:28","12:42","12:37","12:21","04:56","02:28","03:38","01:26","03:39","10:16","09:39","02:20","11:25","12:21","01:41","01:31","01:06","04:07","12:51","09:18","03:13","02:57","10:25","10:40","09:07","02:34","10:25","09:11","10:51","09:53"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:08";

double ret = 18.033333333333445;

assertEquals(46, ret, solution.maxCut(var0, var1));
}

void testCase47 () {
string _var0[] = {"11:10","10:23","03:26","11:02","01:50","01:57","04:06","03:54","10:48","10:49","04:42","04:48","10:57","10:18","09:49","01:04","11:54","10:45","09:20","11:26","02:35","12:56","10:52","11:57","03:24","09:29","03:40","09:21","12:48","09:19","09:08"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:29";

double ret = 16.161290322580648;

assertEquals(47, ret, solution.maxCut(var0, var1));
}

void testCase48 () {
string _var0[] = {"12:46","10:38","10:25","09:17","09:17","04:16","03:43","09:24","11:07","01:03","03:45","01:57","11:06","04:31","03:28","01:44","11:20","10:48","09:23","01:05","03:53","03:13","11:52","11:02","03:31","12:24","12:44","11:39","09:42","04:30","04:44","03:21"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:26";

double ret = 12.090909090908946;

assertEquals(48, ret, solution.maxCut(var0, var1));
}

void testCase49 () {
string _var0[] = {"09:19","11:53","02:21","12:22","09:03","11:30","02:52","04:51","10:40","10:24","01:24","02:02","02:40","02:11","09:18","03:19","03:59","09:40","04:16","02:03","02:39","04:39","10:55","12:25","04:52","10:24","02:09","02:37","04:27","04:30","10:56","01:45","12:54"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:01";

double ret = 14.058823529411903;

assertEquals(49, ret, solution.maxCut(var0, var1));
}

void testCase50 () {
string _var0[] = {"11:23","09:34","09:25","04:03","04:54","02:27","11:45","02:21","09:22","04:21","10:41","01:45","04:56","12:59","12:32","04:23","04:14","02:45","01:58","11:11","01:48","03:29","10:42","04:58","01:12","10:17","12:57","11:58","01:49","09:32","11:20","01:40","01:14","01:27"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:30";

double ret = 15.85714285714263;

assertEquals(50, ret, solution.maxCut(var0, var1));
}

void testCase51 () {
string _var0[] = {"01:11","11:19","02:24","10:29","09:14","03:47","02:07","11:03","12:55","01:45","10:02","11:40","04:00","09:52","04:43","02:17","03:00","11:45","02:24","11:33","03:44","10:28","09:18","12:30","02:06","11:15","03:15","01:45","11:27","04:48","12:07","09:42","09:37","04:50","11:42"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:05";

double ret = 7.33333333333359;

assertEquals(51, ret, solution.maxCut(var0, var1));
}

void testCase52 () {
string _var0[] = {"02:37","11:22","01:33","09:24","10:55","03:17","03:50","12:58","11:31","01:14","02:25","03:42","09:13","02:27","02:49","10:58","10:44","09:12","04:49","12:29","11:32","10:46","03:13","10:04","01:18","04:15","09:05","10:48","03:49","02:52","02:40","11:20","02:48","02:53","09:05","11:41"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:22";

double ret = 15.266666666666577;

assertEquals(52, ret, solution.maxCut(var0, var1));
}

void testCase53 () {
string _var0[] = {"09:52","09:55","11:07","09:39","02:40","03:08","04:08","01:22","10:13","09:05","10:05","09:47","12:41","04:36","10:17","09:56","10:19","11:55","01:41","11:33","12:44","02:17","03:30","01:28","04:07","02:35","09:19","01:52","10:54","03:29","11:02","01:23","01:03","01:26","01:42","10:46","09:25"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "04:45";

double ret = 9.0;

assertEquals(53, ret, solution.maxCut(var0, var1));
}

void testCase54 () {
string _var0[] = {"02:35","04:35","11:55","04:44","03:53","10:33","04:11","01:49","12:24","03:29","04:21","03:48","09:45","10:48","12:43","01:07","03:51","02:06","11:37","12:19","11:05","01:45","12:18","01:20","11:48","09:59","10:29","10:43","09:33","04:14","12:31","09:49","04:59","10:10","03:22","02:05","11:55","04:02"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:54";

double ret = 12.59999999999992;

assertEquals(54, ret, solution.maxCut(var0, var1));
}

void testCase55 () {
string _var0[] = {"01:35","04:13","09:51","10:16","04:02","02:52","09:15","03:12","04:03","03:39","11:05","03:49","04:11","10:19","12:07","11:41","09:54","09:13","04:21","11:19","10:06","04:52","03:13","02:56","09:16","11:08","10:24","01:40","04:58","12:38","12:42","12:50","12:30","12:12","10:59","10:49","04:39","12:33","12:34"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:07";

double ret = 13.692307692307926;

assertEquals(55, ret, solution.maxCut(var0, var1));
}

void testCase56 () {
string _var0[] = {"03:26","02:26","11:44","10:40","11:36","09:12","04:14","10:42","04:43","04:10","12:03","10:15","09:14","09:36","12:17","04:13","02:07","01:06","04:35","03:27","04:04","04:31","09:57","11:58","04:14","02:17","09:36","04:26","04:23","02:05","03:45","12:59","02:15","02:24","09:24","01:48","02:53","03:17","09:22","02:15"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:35";

double ret = 9.099999999999932;

assertEquals(56, ret, solution.maxCut(var0, var1));
}

void testCase57 () {
string _var0[] = {"09:16","03:32","11:07","09:32","01:24","02:11","10:33","12:26","04:01","11:26","02:23","01:54","11:53","02:31","04:11","09:08","04:40","01:30","02:58","09:11","10:59","10:03","04:25","09:37","02:01","03:39","09:19","09:20","04:22","10:31","01:18","01:23","03:45","11:09","03:34","09:12","04:05","10:03","04:42","02:10","03:09"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:42";

double ret = 11.47826086956523;

assertEquals(57, ret, solution.maxCut(var0, var1));
}

void testCase58 () {
string _var0[] = {"09:58","09:42","01:12","04:36","09:33","04:34","09:17","09:10","09:38","02:03","12:24","11:18","04:44","10:58","10:09","10:01","12:45","01:55","02:06","03:44","12:11","03:37","11:43","01:05","02:05","11:13","09:43","11:25","03:30","12:41","10:34","03:58","09:14","11:17","04:18","12:15","03:36","10:06","03:08","02:00","01:19","01:11"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:41";

double ret = 13.595238095238102;

assertEquals(58, ret, solution.maxCut(var0, var1));
}

void testCase59 () {
string _var0[] = {"09:40","04:42","09:02","04:12","10:24","04:40","03:06","04:33","10:59","02:44","11:19","12:40","10:29","10:27","11:40","09:17","12:45","09:42","03:49","10:52","09:15","10:39","11:30","04:57","10:54","12:32","03:07","12:25","09:06","11:10","03:58","09:49","02:34","09:57","12:39","04:47","02:31","04:54","02:18","01:40","04:50","02:35","02:40"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:06";

double ret = -1.0;

assertEquals(59, ret, solution.maxCut(var0, var1));
}

void testCase60 () {
string _var0[] = {"03:56","03:56","11:24","11:39","11:43","11:37","03:53","10:16","12:15","03:51","02:26","04:17","11:15","03:52","11:09","10:48","03:07","09:07","03:17","01:57","09:17","01:38","10:58","02:04","02:39","03:06","10:15","09:15","10:11","01:58","10:32","02:55","04:58","09:16","12:22","03:51","04:06","11:45","03:53","09:52","03:13","03:52","09:45","02:55"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:33";

double ret = 12.545454545454591;

assertEquals(60, ret, solution.maxCut(var0, var1));
}

void testCase61 () {
string _var0[] = {"03:33","11:20","10:21","04:20","04:48","04:15","11:08","12:15","12:53","11:48","04:08","10:38","09:13","10:45","01:29","10:32","04:07","03:16","01:41","12:52","11:52","02:22","01:22","12:24","12:16","10:17","09:13","04:51","12:53","02:50","01:26","11:31","02:51","03:29","02:52","03:47","02:35","03:29","01:09","10:29","10:26","11:12","02:31","12:56","11:33"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:52";

double ret = 10.581395348837416;

assertEquals(61, ret, solution.maxCut(var0, var1));
}

void testCase62 () {
string _var0[] = {"04:51","10:46","10:26","03:18","03:35","01:01","01:38","04:40","09:38","01:12","01:47","12:14","12:39","11:37","01:22","09:46","02:03","09:57","11:42","04:58","12:41","03:23","04:55","02:23","12:05","12:19","11:08","01:46","03:42","11:12","03:48","01:54","02:04","12:49","11:57","03:48","03:52","03:37","01:37","01:11","03:55","11:53","12:06","10:50","02:23","02:15"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:46";

double ret = 11.289473684210629;

assertEquals(62, ret, solution.maxCut(var0, var1));
}

void testCase63 () {
string _var0[] = {"03:09","09:21","10:22","09:21","09:45","03:36","10:09","11:36","02:21","03:28","12:13","10:49","04:06","10:39","01:14","02:02","04:09","11:37","11:09","12:42","09:36","11:58","03:09","12:22","09:36","09:52","01:04","12:37","01:23","12:51","03:30","09:34","02:46","12:13","09:54","04:25","11:45","04:14","11:36","09:23","11:26","01:45","11:02","01:15","09:28","02:23","12:27"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:29";

double ret = 11.659574468085212;

assertEquals(63, ret, solution.maxCut(var0, var1));
}

void testCase64 () {
string _var0[] = {"01:38","11:09","02:06","11:10","10:56","04:44","03:09","03:19","03:18","10:46","12:49","04:27","01:48","12:56","11:58","10:44","04:26","01:39","02:44","03:22","11:34","03:09","03:17","02:03","01:27","01:56","01:56","09:27","12:20","11:31","03:34","11:19","09:18","02:21","02:32","02:53","12:07","01:09","03:56","01:27","10:22","11:44","03:45","03:09","10:49","01:39","04:45","10:18"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:39";

double ret = 9.0;

assertEquals(64, ret, solution.maxCut(var0, var1));
}

void testCase65 () {
string _var0[] = {"12:38","09:46","04:24","11:08","02:02","02:35","02:28","01:47","10:14","12:10","03:28","02:55","11:09","04:31","09:27","12:04","01:48","03:58","10:03","03:38","09:19","11:58","10:02","01:48","04:03","02:10","11:59","01:50","01:26","09:57","12:05","12:18","04:43","01:27","02:47","04:07","12:57","01:02","10:10","12:47","02:59","04:11","02:20","10:04","03:30","02:35","03:09","03:18","01:51"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:50";

double ret = 9.26315789473687;

assertEquals(65, ret, solution.maxCut(var0, var1));
}

void testCase66 () {
string _var0[] = {"12:11","04:59","03:25","04:23","12:05","11:31","01:06","12:41","02:29","10:23","11:51","04:26","12:24","02:06","02:13","03:26","12:42","11:23","04:15","10:59","10:50","01:59","10:06","09:16","12:29","11:26","09:43","11:09","12:30","09:45","12:57","10:26","09:07","01:19","01:55","02:36","12:43","09:44","01:06","10:01","03:15","03:44","10:32","01:35","10:47","11:49","03:52","01:57","11:50","02:53"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:38";

double ret = 11.145833333333444;

assertEquals(66, ret, solution.maxCut(var0, var1));
}

void testCase67 () {
string _var0[] = {"01:22","09:25","01:06","02:13","03:11","04:16","12:27","10:55","04:11","02:20","04:35","10:59","10:30","11:48","12:34","03:56","02:12","04:12","02:42","02:48","03:45","11:58","09:54","12:03","09:41","03:50","03:37","04:37","10:59","11:34","11:51","09:24","03:07","11:19","03:03","03:03","10:23","04:29","01:53","01:29","02:43"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:11";

double ret = 11.950000000000134;

assertEquals(67, ret, solution.maxCut(var0, var1));
}

void testCase68 () {
string _var0[] = {"03:25","11:02","03:57","02:22","11:14","09:41","03:08","04:49","10:20","02:10","09:58","01:02","12:11","12:55","03:05","04:36","10:16","11:50","10:26","10:05","02:11","10:30","02:20","11:32","11:35","04:39","11:29","03:48","02:55","01:55","09:00","03:10","12:34","01:08","10:54","10:30","03:06","11:56","12:15","12:43","09:07","11:32"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:21";

double ret = 12.897435897436134;

assertEquals(68, ret, solution.maxCut(var0, var1));
}

void testCase69 () {
string _var0[] = {"10:41","02:06","10:29","04:32","09:01","02:29","03:57","04:46","04:44","01:13","04:46","04:25","09:20","01:59","02:33","09:58","02:00","01:29","12:34","03:06","09:15","11:20","01:20","03:09","12:17","01:04","10:11","09:20","11:10","04:28","11:30","10:34","01:16","12:00","02:41","03:42","01:40","04:05","11:40","11:53","04:24","01:18","09:22"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:57";

double ret = 11.720000000000176;

assertEquals(69, ret, solution.maxCut(var0, var1));
}

void testCase70 () {
string _var0[] = {"12:32","01:14","02:24","02:29","12:31","01:23","01:28","10:09","03:13","09:07","03:43","04:29","01:07","12:38","02:56","12:51","09:19","01:46","09:36","09:06","11:31","09:38","04:47","12:39","12:13","09:15","03:51","03:35","02:13","11:18","11:01","02:00","12:55","03:48","12:49","12:47","03:55","12:32","10:35","03:32","01:07","11:17","11:32","11:47"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:48";

double ret = 10.931034482758408;

assertEquals(70, ret, solution.maxCut(var0, var1));
}

void testCase71 () {
string _var0[] = {"03:28","04:22","10:35","11:13","04:33","10:57","04:41","10:34","11:55","09:39","11:11","04:13","11:07","02:27","03:41","04:23","09:57","11:23","02:57","02:01","10:33","11:11","12:27","04:33","04:21","10:06","12:41","03:01","09:56","02:28","09:06","12:12","12:36","11:37","11:10","04:41","11:33","02:18","11:30","09:09","03:10","02:58","03:06","02:47","12:41"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:26";

double ret = 9.124999999999986;

assertEquals(71, ret, solution.maxCut(var0, var1));
}

void testCase72 () {
string _var0[] = {"03:58","02:42","09:50","02:32","11:03","10:51","03:10","04:16","02:35","10:30","10:30","01:25","10:11","03:56","01:39","12:35","09:02","12:11","12:04","04:30","04:47","01:46","02:51","11:27","09:38","04:39","04:46","09:35","01:16","12:32","11:54","11:42","02:23","04:58","02:47","02:24","03:08","09:37","11:02","03:02","10:11","11:24","10:30","01:56","04:39","02:36"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:00";

double ret = 10.849999999999927;

assertEquals(72, ret, solution.maxCut(var0, var1));
}

void testCase73 () {
string _var0[] = {"01:08","11:41","02:41","10:46","03:19","01:38","02:33","02:46","12:51","12:12","10:30","11:28","04:13","11:05","04:11","01:05","11:32","09:24","02:27","01:38","02:32","12:54","10:05","04:53","11:01","12:40","10:32","02:51","09:20","09:11","09:11","04:50","02:20","02:56","03:45","11:56","11:05","11:55","10:17","03:39","04:11","02:29","04:04","11:36","11:46","01:57","10:04"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:52";

double ret = 10.883720930232704;

assertEquals(73, ret, solution.maxCut(var0, var1));
}

void testCase74 () {
string _var0[] = {"09:15","09:04","11:12","04:36","01:38","10:15","12:05","10:55","09:22","03:42","04:14","03:03","04:59","04:40","11:47","11:38","09:35","10:54","09:21","12:26","12:09","04:30","01:34","01:48","09:30","04:00","04:39","02:01","12:02","11:16","10:32","12:34","11:35","01:59","12:55","02:08","12:04","03:49","12:13","04:09","04:17","01:28","11:14","09:03","02:51","09:18","04:52","01:54"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:37";

double ret = 9.58333333333358;

assertEquals(74, ret, solution.maxCut(var0, var1));
}

void testCase75 () {
string _var0[] = {"09:12","09:39","11:50","03:06","09:51","01:01","12:31","02:29","04:50","12:33","09:12","09:19","02:18","03:46","02:44","09:15","02:06","09:46","02:20","03:29","10:26","12:24","03:34","09:10","11:22","10:16","10:47","02:27","01:17","04:13","04:15","09:09","10:29","11:41","02:58","03:28","03:30","11:05","12:23","09:04","12:14","01:11","04:58","03:42","01:31","09:35","11:40","11:40","03:21"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:06";

double ret = 8.0;

assertEquals(75, ret, solution.maxCut(var0, var1));
}

void testCase76 () {
string _var0[] = {"03:06","02:05","09:08","01:30","12:59","10:12","11:37","03:15","01:22","01:27","02:49","10:42","09:40","04:47","09:27","03:45","02:27","02:39","03:55","04:38","10:17","04:31","04:41","01:02","09:36","12:20","04:27","03:46","02:06","09:33","11:23","09:28","12:47","09:49","04:13","02:16","03:54","02:24","12:09","12:09","04:21","02:19","11:18","12:24","09:09","09:41","01:06","04:20","10:53","02:04"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:34";

double ret = 11.319999999999862;

assertEquals(76, ret, solution.maxCut(var0, var1));
}

void testCase77 () {
string _var0[] = {"09:45","02:15","12:05","02:46","02:32","04:33","01:24","09:19","11:43","01:35","10:44","12:57","09:14","03:27","04:19","03:15","09:09","09:29","04:13","12:29","11:56","01:56","03:48","03:05","02:42","09:58","09:29","02:35","04:26","12:52","02:33","03:44","11:34","02:47","10:31","02:34","04:58","02:24","02:58","04:41","02:19"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:06";

double ret = 10.499999999999716;

assertEquals(77, ret, solution.maxCut(var0, var1));
}

void testCase78 () {
string _var0[] = {"10:10","09:58","02:01","04:13","04:53","10:01","11:50","02:35","11:12","03:54","11:14","12:35","03:32","09:40","12:05","01:16","11:43","09:09","02:47","04:43","10:36","01:07","12:48","04:45","11:36","02:01","09:27","12:16","03:46","11:58","10:01","09:47","04:14","12:38","03:37","04:14","01:57","10:10","11:26","11:33","12:29","04:03"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:53";

double ret = 12.324999999999868;

assertEquals(78, ret, solution.maxCut(var0, var1));
}

void testCase79 () {
string _var0[] = {"04:38","01:21","03:24","12:51","04:57","03:09","11:49","02:55","03:35","11:04","01:32","01:15","10:03","02:05","02:14","11:01","09:42","02:00","11:15","12:30","02:07","12:10","01:35","10:38","09:11","12:09","09:56","10:57","01:13","01:28","09:17","01:54","11:12","12:14","09:26","11:31","02:12","11:01","04:47","11:18","10:36","12:33","01:19"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:21";

double ret = 10.945945945945732;

assertEquals(79, ret, solution.maxCut(var0, var1));
}

void testCase80 () {
string _var0[] = {"02:31","11:54","02:13","04:39","01:10","10:00","04:10","02:37","04:49","01:47","09:38","10:35","10:33","03:32","11:30","03:32","02:21","04:36","12:43","09:57","10:15","10:23","10:28","11:03","10:22","01:31","03:34","04:00","02:38","04:59","02:08","01:09","01:08","02:27","02:03","10:40","01:07","02:47","03:04","04:10","01:41","11:16","10:30","11:02"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:19";

double ret = 11.555555555555797;

assertEquals(80, ret, solution.maxCut(var0, var1));
}

void testCase81 () {
string _var0[] = {"04:59","11:12","02:50","04:37","03:17","10:26","01:46","04:29","09:12","12:44","11:47","04:45","01:57","02:07","10:41","09:37","11:22","11:48","10:05","10:47","09:47","02:52","02:46","10:11","11:04","09:38","09:30","10:39","12:26","01:33","12:50","02:56","10:24","03:29","02:32","09:55","12:01","02:13","04:37","10:46","12:13","12:32","09:15","01:40","09:57"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:41";

double ret = 11.311111111111247;

assertEquals(81, ret, solution.maxCut(var0, var1));
}

void testCase82 () {
string _var0[] = {"12:44","11:36","03:47","04:29","02:30","10:11","04:54","02:03","12:11","11:20","02:38","02:50","03:45","11:00","09:37","11:23","10:26","02:51","01:44","10:03","03:29","02:05","12:26","03:37","09:14","02:32","03:30","01:09","11:16","10:15","03:43","10:12","04:07","01:12","04:40","10:40","03:00","10:52","12:10","10:37","03:33","03:03","02:07","03:18","04:01","03:19"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:45";

double ret = 11.749999999999712;

assertEquals(82, ret, solution.maxCut(var0, var1));
}

void testCase83 () {
string _var0[] = {"01:09","03:56","12:17","09:44","03:45","04:25","09:26","04:21","02:10","12:45","04:37","11:56","09:20","09:06","09:15","09:12","10:33","11:32","10:13","10:39","02:10","01:31","04:06","11:53","12:37","10:14","03:32","03:43","03:52","11:12","11:56","01:37","03:10","03:14","03:18","09:23","04:07","12:21","02:43","01:57","12:03","04:50","10:42","02:06","10:12","11:36","10:43"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:33";

double ret = 12.06382978723391;

assertEquals(83, ret, solution.maxCut(var0, var1));
}

void testCase84 () {
string _var0[] = {"12:32","01:44","12:51","02:35","02:13","04:48","09:25","04:56","09:28","02:43","12:18","09:04","11:50","12:18","03:51","01:38","03:55","12:57","11:09","09:17","01:53","03:52","10:46","04:15","02:08","12:44","10:11","11:40","02:44","04:58","02:43","09:43","02:36","01:27","11:33","12:48","02:07","04:07","12:14","04:26","11:21","09:04","01:58","11:35","10:43","04:58","11:41","03:47"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:41";

double ret = 9.945945945945736;

assertEquals(84, ret, solution.maxCut(var0, var1));
}

void testCase85 () {
string _var0[] = {"11:33","09:00","02:34","03:31","01:27","04:53","02:31","12:30","01:05","11:24","12:58","12:22","02:20","09:03","12:36","04:50","04:53","12:49","10:26","03:30","04:03","10:44","03:00","09:49","09:37","04:20","04:09","09:22","12:12","11:45","11:53","12:16","04:10","04:53","09:02","02:41","11:49","09:40","12:48","10:57","04:03","04:00","04:44","12:44","09:55","03:40","04:16","02:29","02:46"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:17";

double ret = 6.416666666666398;

assertEquals(85, ret, solution.maxCut(var0, var1));
}

void testCase86 () {
string _var0[] = {"12:37","02:12","02:16","10:20","02:34","03:35","04:10","09:52","11:21","11:05","01:17","04:08","03:04","02:23","01:48","03:41","01:18","02:39","10:14","11:01","10:55","09:00","11:19","04:05","01:42","12:44","02:11","12:13","11:59","03:06","10:38","03:13","04:30","10:47","03:55","12:41","12:15","10:04","11:26","09:02","03:07","04:26","03:44","01:08","09:39","09:39","12:47","10:15","09:32","01:53"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:24";

double ret = 9.83333333333358;

assertEquals(86, ret, solution.maxCut(var0, var1));
}

void testCase87 () {
string _var0[] = {"02:38","02:00","12:35","04:17","01:17","01:49","10:49","10:23","12:38","11:16","10:13","09:05","04:31","03:28","11:13","01:51","01:34","03:20","12:31","11:15","10:41","10:43","03:23","04:41","02:35","09:51","10:53","04:07","03:37","01:02","09:47","12:19","03:46","01:18","12:11","04:54","04:44","11:32","11:18","02:51","12:12"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:32";

double ret = 11.416666666666908;

assertEquals(87, ret, solution.maxCut(var0, var1));
}

void testCase88 () {
string _var0[] = {"11:05","04:19","11:01","09:19","12:52","03:20","02:10","09:13","12:21","02:20","11:42","01:57","09:03","10:37","09:20","12:16","03:31","01:59","11:01","03:35","12:33","03:35","11:50","01:58","03:20","02:00","09:28","09:50","10:01","10:51","02:42","02:26","09:14","03:35","01:12","11:43","11:02","01:47","11:50","04:37","01:21","04:44"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:32";

double ret = 12.119047619047707;

assertEquals(88, ret, solution.maxCut(var0, var1));
}

void testCase89 () {
string _var0[] = {"01:26","01:30","04:32","02:32","12:57","02:33","01:41","10:56","02:19","09:59","02:54","10:20","02:44","11:25","02:19","02:59","01:21","12:53","03:17","04:28","01:39","12:45","01:07","02:04","03:00","02:18","02:19","02:08","02:57","12:56","09:44","01:42","01:12","10:40","01:56","09:26","10:07","11:14","09:39","12:14","10:06","11:46","12:13"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:36";

double ret = 12.103448275862199;

assertEquals(89, ret, solution.maxCut(var0, var1));
}

void testCase90 () {
string _var0[] = {"01:15","01:19","03:33","02:43","12:49","04:46","11:54","03:58","03:07","04:53","12:57","04:21","09:22","11:32","01:01","02:43","01:37","11:42","11:49","02:17","01:05","01:24","04:00","10:38","09:58","09:23","01:27","10:43","04:37","03:48","10:30","03:31","01:36","12:33","01:45","11:53","04:00","11:04","02:24","01:49","01:18","01:11","11:43","03:51"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:40";

double ret = 11.567567567567323;

assertEquals(90, ret, solution.maxCut(var0, var1));
}

void testCase91 () {
string _var0[] = {"10:15","04:36","10:28","10:16","01:26","01:09","03:01","11:16","01:48","12:53","04:36","09:05","01:51","11:31","02:58","11:14","12:02","09:04","03:24","11:19","12:56","02:03","11:56","02:43","12:55","11:22","03:56","09:03","12:23","11:19","11:33","03:22","12:09","02:44","02:45","12:11","11:16","09:17","10:39","01:57","12:59","03:37","02:37","09:25","02:03"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:27";

double ret = 12.027777777778017;

assertEquals(91, ret, solution.maxCut(var0, var1));
}

void testCase92 () {
string _var0[] = {"02:24","09:47","02:56","11:56","02:16","02:11","01:59","11:26","02:23","01:35","09:02","03:57","11:43","04:03","10:16","03:18","02:12","09:00","04:13","02:42","02:52","09:01","11:42","03:29","10:19","10:16","09:25","09:04","03:23","09:10","02:18","11:34","04:33","04:19","02:59","03:13","12:11","10:49","10:27","09:28","09:09","12:55","10:43","01:32","12:58","03:25"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:25";

double ret = 12.282608695652229;

assertEquals(92, ret, solution.maxCut(var0, var1));
}

void testCase93 () {
string _var0[] = {"09:04","11:04","04:55","03:35","12:02","11:24","04:04","11:01","01:25","11:57","09:37","11:42","11:40","01:41","11:19","04:49","11:01","12:57","12:30","02:21","10:40","03:05","01:48","11:28","10:35","10:11","10:55","12:09","10:51","09:38","02:58","01:35","11:37","10:44","12:47","12:27","09:42","09:46","01:53","10:23","02:05","10:48","12:21","03:38","04:19","02:52","11:25"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:28";

double ret = 11.543478260869737;

assertEquals(93, ret, solution.maxCut(var0, var1));
}

void testCase94 () {
string _var0[] = {"10:53","11:07","10:56","03:15","03:43","03:35","02:26","12:17","04:44","02:53","01:15","12:20","11:59","11:22","12:54","09:33","09:57","03:26","04:08","02:20","11:16","02:49","03:07","01:36","11:24","09:05","10:47","09:01","04:25","01:10","09:16","10:46","12:02","02:53","01:02","02:34","04:17","12:08","12:28","09:46","11:11","01:10","03:59","12:24","01:00","10:47","02:52","04:12"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "06:33";

double ret = 11.119047619047711;

assertEquals(94, ret, solution.maxCut(var0, var1));
}

void testCase95 () {
string _var0[] = {"04:40","04:39","01:52","12:48","10:05","10:28","02:51","03:52","02:20","03:54","01:47","02:25","09:10","01:43","10:51","03:52","01:05","11:06","11:48","12:11","09:04","02:41","01:36","10:48","11:32","03:43","12:58","12:36","02:19","01:45","10:08","12:53","01:27","04:14","09:30","03:09","12:42","12:01","03:49","12:19","04:29","12:36","11:52","09:35","12:00","01:23","01:28","02:10","01:47"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "04:43";

double ret = -1.0;

assertEquals(95, ret, solution.maxCut(var0, var1));
}

void testCase96 () {
string _var0[] = {"04:39","02:56","02:27","11:15","03:51","03:55","03:21","04:00","11:24","03:57","12:28","10:25","01:51","10:10","01:51","01:07","02:06","12:15","12:05","02:14","10:09","09:07","12:56","11:21","10:16","03:04","01:13","02:59","09:05","02:14","01:53","01:36","03:17","01:41","04:06","10:31","12:50","11:56","09:46","11:49","12:35","12:11","01:50","02:16","03:39","09:21","03:15","03:05","12:16","12:27"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:53";

double ret = 9.578947368421023;

assertEquals(96, ret, solution.maxCut(var0, var1));
}

void testCase97 () {
string _var0[] = {"04:22","09:00"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "05:52";

double ret = 90.0;

assertEquals(97, ret, solution.maxCut(var0, var1));
}

void testCase98 () {
string _var0[] = {"09:00"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "09:05";

double ret = 5.0;

assertEquals(98, ret, solution.maxCut(var0, var1));
}

void testCase99 () {
string _var0[] = {"09:00","09:00","09:00"};
vector <string> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

string var1 = "09:15";

double ret = 5.0;

assertEquals(99, ret, solution.maxCut(var0, var1));
}
	
    public: void runTest(int testCase) {
		double tempo;
		clock_t Begin, End;
		   
		Begin = clock();    
		switch (testCase) {
			
		case(0): testCase0(); break;
		case(1): testCase1(); break;
		case(2): testCase2(); break;
		case(3): testCase3(); break;
		case(4): testCase4(); break;
		case(5): testCase5(); break;
		case(6): testCase6(); break;
		case(7): testCase7(); break;
		case(8): testCase8(); break;
		case(9): testCase9(); break;
		case(10): testCase10(); break;
		case(11): testCase11(); break;
		case(12): testCase12(); break;
		case(13): testCase13(); break;
		case(14): testCase14(); break;
		case(15): testCase15(); break;
		case(16): testCase16(); break;
		case(17): testCase17(); break;
		case(18): testCase18(); break;
		case(19): testCase19(); break;
		case(20): testCase20(); break;
		case(21): testCase21(); break;
		case(22): testCase22(); break;
		case(23): testCase23(); break;
		case(24): testCase24(); break;
		case(25): testCase25(); break;
		case(26): testCase26(); break;
		case(27): testCase27(); break;
		case(28): testCase28(); break;
		case(29): testCase29(); break;
		case(30): testCase30(); break;
		case(31): testCase31(); break;
		case(32): testCase32(); break;
		case(33): testCase33(); break;
		case(34): testCase34(); break;
		case(35): testCase35(); break;
		case(36): testCase36(); break;
		case(37): testCase37(); break;
		case(38): testCase38(); break;
		case(39): testCase39(); break;
		case(40): testCase40(); break;
		case(41): testCase41(); break;
		case(42): testCase42(); break;
		case(43): testCase43(); break;
		case(44): testCase44(); break;
		case(45): testCase45(); break;
		case(46): testCase46(); break;
		case(47): testCase47(); break;
		case(48): testCase48(); break;
		case(49): testCase49(); break;
		case(50): testCase50(); break;
		case(51): testCase51(); break;
		case(52): testCase52(); break;
		case(53): testCase53(); break;
		case(54): testCase54(); break;
		case(55): testCase55(); break;
		case(56): testCase56(); break;
		case(57): testCase57(); break;
		case(58): testCase58(); break;
		case(59): testCase59(); break;
		case(60): testCase60(); break;
		case(61): testCase61(); break;
		case(62): testCase62(); break;
		case(63): testCase63(); break;
		case(64): testCase64(); break;
		case(65): testCase65(); break;
		case(66): testCase66(); break;
		case(67): testCase67(); break;
		case(68): testCase68(); break;
		case(69): testCase69(); break;
		case(70): testCase70(); break;
		case(71): testCase71(); break;
		case(72): testCase72(); break;
		case(73): testCase73(); break;
		case(74): testCase74(); break;
		case(75): testCase75(); break;
		case(76): testCase76(); break;
		case(77): testCase77(); break;
		case(78): testCase78(); break;
		case(79): testCase79(); break;
		case(80): testCase80(); break;
		case(81): testCase81(); break;
		case(82): testCase82(); break;
		case(83): testCase83(); break;
		case(84): testCase84(); break;
		case(85): testCase85(); break;
		case(86): testCase86(); break;
		case(87): testCase87(); break;
		case(88): testCase88(); break;
		case(89): testCase89(); break;
		case(90): testCase90(); break;
		case(91): testCase91(); break;
		case(92): testCase92(); break;
		case(93): testCase93(); break;
		case(94): testCase94(); break;
		case(95): testCase95(); break;
		case(96): testCase96(); break;
		case(97): testCase97(); break;
		case(98): testCase98(); break;
		case(99): testCase99(); break;
			default: cerr << "No such test case: " << testCase << endl; exit (1);
		}
		End = clock();
		tempo = (double) (End - Begin) / CLOCKS_PER_SEC;
		
		printf (" in %.4lfs\n", tempo);
	}

};

bool HairCutsTest::passed;

int main(int argc, char *argv[]) {
	int cnt = 0, cntAc = 0, caso = -1;
	bool passedAll = true;
	
	if (argc > 1) {
		caso = atoi (argv[1]);
		if (caso == 100)
			return 100;
	}
	
    for (int i = 0; i < 100; i++) {
    	if (caso != -1 && caso != i) continue;
    	
		cnt++;
		HairCutsTest *test = new HairCutsTest ();
		test->runTest(i);
		passedAll &= HairCutsTest::passed;
		if (HairCutsTest::passed) cntAc++;
    }
    if (caso == -1) {
		if (passedAll) {
    		cout << "You've got AC! (" << cnt << "/" << cntAc << ")" << endl;
    	} else {
 	   		cout << "You've got WA! (" << cnt << "/" << cntAc << ")" << endl;
    	}
    }
    return 0;	
}
