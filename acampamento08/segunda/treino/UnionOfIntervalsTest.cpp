#define TEST

#include "UnionOfIntervals.cpp"
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <stdio.h>
#include <time.h>
using namespace std;



class UnionOfIntervalsTest {

	public: static bool passed;
	
	    
    static void assertEquals(int testCase, const int& expected, const int& actual) {
        if (expected == actual) {
        	passed = true;
            cout << "Test case " << testCase << " PASSED!";
        } else {
        	passed = false;
            cout << "Test case " << testCase << " FAILED! Expected: <" << expected << "> but was: <" << actual << '>';
        }
    }


    UnionOfIntervals solution;
    
    

void testCase0 () {
int _var0[] = {1,5};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {3,7};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 4;

int ret = 6;

assertEquals(0, ret, solution.nthElement(var0, var1, var2));
}

void testCase1 () {
int _var0[] = {1,3};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {4,5};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 3;

int ret = 3;

assertEquals(1, ret, solution.nthElement(var0, var1, var2));
}

void testCase2 () {
int _var0[] = {-1500000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {1500000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1500000091;

int ret = 91;

assertEquals(2, ret, solution.nthElement(var0, var1, var2));
}

void testCase3 () {
int _var0[] = {1999999998};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1;

int ret = 1999999999;

assertEquals(3, ret, solution.nthElement(var0, var1, var2));
}

void testCase4 () {
int _var0[] = {-456,-82481,484,399};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {19342,200,8484,1000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 44444;

int ret = -38037;

assertEquals(4, ret, solution.nthElement(var0, var1, var2));
}

void testCase5 () {
int _var0[] = {-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 16;

int ret = -1999999984;

assertEquals(5, ret, solution.nthElement(var0, var1, var2));
}

void testCase6 () {
int _var0[] = {};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 0;

int ret = -2000000000;

assertEquals(6, ret, solution.nthElement(var0, var1, var2));
}

void testCase7 () {
int _var0[] = {};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 49;

int ret = -2000000000;

assertEquals(7, ret, solution.nthElement(var0, var1, var2));
}

void testCase8 () {
int _var0[] = {};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 50;

int ret = -1999999999;

assertEquals(8, ret, solution.nthElement(var0, var1, var2));
}

void testCase9 () {
int _var0[] = {};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1999999999;

int ret = -1960000001;

assertEquals(9, ret, solution.nthElement(var0, var1, var2));
}

void testCase10 () {
int _var0[] = {};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = -1960000000;

assertEquals(10, ret, solution.nthElement(var0, var1, var2));
}

void testCase11 () {
int _var0[] = {1999999999};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 0;

int ret = 1999999999;

assertEquals(11, ret, solution.nthElement(var0, var1, var2));
}

void testCase12 () {
int _var0[] = {1999999999};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1;

int ret = 2000000000;

assertEquals(12, ret, solution.nthElement(var0, var1, var2));
}

void testCase13 () {
int _var0[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1224;

int ret = 49;

assertEquals(13, ret, solution.nthElement(var0, var1, var2));
}

void testCase14 () {
int _var0[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1225;

int ret = 50;

assertEquals(14, ret, solution.nthElement(var0, var1, var2));
}

void testCase15 () {
int _var0[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1226;

int ret = 50;

assertEquals(15, ret, solution.nthElement(var0, var1, var2));
}

void testCase16 () {
int _var0[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1227;

int ret = 50;

assertEquals(16, ret, solution.nthElement(var0, var1, var2));
}

void testCase17 () {
int _var0[] = {1,2};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2,2};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 0;

int ret = 1;

assertEquals(17, ret, solution.nthElement(var0, var1, var2));
}

void testCase18 () {
int _var0[] = {1,2};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2,2};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1;

int ret = 2;

assertEquals(18, ret, solution.nthElement(var0, var1, var2));
}

void testCase19 () {
int _var0[] = {1,2};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2,2};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2;

int ret = 2;

assertEquals(19, ret, solution.nthElement(var0, var1, var2));
}

void testCase20 () {
int _var0[] = {-2000000000,-2000000000,-1999999999};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-1999999999,-1999999998,-1999999997};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 0;

int ret = -2000000000;

assertEquals(20, ret, solution.nthElement(var0, var1, var2));
}

void testCase21 () {
int _var0[] = {-2000000000,-2000000000,-1999999999};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-1999999999,-1999999998,-1999999997};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1;

int ret = -2000000000;

assertEquals(21, ret, solution.nthElement(var0, var1, var2));
}

void testCase22 () {
int _var0[] = {-2000000000,-2000000000,-1999999999};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-1999999999,-1999999998,-1999999997};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2;

int ret = -1999999999;

assertEquals(22, ret, solution.nthElement(var0, var1, var2));
}

void testCase23 () {
int _var0[] = {-2000000000,-2000000000,-1999999999};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-1999999999,-1999999998,-1999999997};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 3;

int ret = -1999999999;

assertEquals(23, ret, solution.nthElement(var0, var1, var2));
}

void testCase24 () {
int _var0[] = {-2000000000,-2000000000,-1999999999};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-1999999999,-1999999998,-1999999997};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 4;

int ret = -1999999999;

assertEquals(24, ret, solution.nthElement(var0, var1, var2));
}

void testCase25 () {
int _var0[] = {-2000000000,-2000000000,-1999999999};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-1999999999,-1999999998,-1999999997};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 5;

int ret = -1999999998;

assertEquals(25, ret, solution.nthElement(var0, var1, var2));
}

void testCase26 () {
int _var0[] = {12,-64,-55,-59,-60,-18,43,1,-76};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {29,19,42,-12,19,-7,82,77,7};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 52;

int ret = -53;

assertEquals(26, ret, solution.nthElement(var0, var1, var2));
}

void testCase27 () {
int _var0[] = {18,-21,-79,-13,45};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {35,77,-20,-8,79};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 92;

int ret = 5;

assertEquals(27, ret, solution.nthElement(var0, var1, var2));
}

void testCase28 () {
int _var0[] = {-75,-4,93,25,-76,46,-25,86};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-75,0,95,32,-70,53,-20,88};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 24;

int ret = 30;

assertEquals(28, ret, solution.nthElement(var0, var1, var2));
}

void testCase29 () {
int _var0[] = {-1,0,0,1,0,1,0,-1,0,1,-1,0,-1,-1,1,-1,1,1,0,-1,0,1,0,0,1,0,1,-1,-1,1,0,0,0,0,-1,-1,0,-1,0,-1,0,-1,-1,1,0,0,0};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-1,0,0,1,0,1,1,-1,1,1,0,1,-1,-1,1,0,1,1,1,-1,0,1,1,0,1,0,1,0,0,1,1,1,0,0,0,-1,1,-1,0,-1,1,0,-1,1,1,1,0};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 28;

int ret = 0;

assertEquals(29, ret, solution.nthElement(var0, var1, var2));
}

void testCase30 () {
int _var0[] = {-1,-2,-1,-1,-1,-1,-2,0,-1,-2,-2,-2,0,-1,-2,-2,0,-2,1,-2,0,-1,0,-2,1,-2,-1,-2,-1,-2,-1,1,-2,-1,1,-1,-2,-1,-2,-2,-1,-1};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {0,-1,1,1,0,0,0,1,-1,0,-1,-2,0,0,0,-2,1,-2,1,0,0,0,1,-1,1,-2,1,-1,0,-1,0,1,0,1,1,0,0,-1,0,0,-1,1};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2;

int ret = -2;

assertEquals(30, ret, solution.nthElement(var0, var1, var2));
}

void testCase31 () {
int _var0[] = {-1,0,0,1,1,-1,-1,2,-1,1,0,-1,-1,2,-1,1,1,0,0,-1,-1,2,0,0,-1,0,0,0,-1,0,0,2,1,0,-1,0,1,0,2,1,1};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {0,2,0,1,1,1,1,2,-1,1,2,1,0,2,0,2,2,2,0,-1,1,2,0,0,1,2,1,1,0,0,2,2,2,2,1,0,2,2,2,2,1};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 74;

int ret = 2;

assertEquals(31, ret, solution.nthElement(var0, var1, var2));
}

void testCase32 () {
int _var0[] = {-28290,-95666,56009,46845,957,-92924,-81921,87726,-96436,-31200,-36490,-29356,97994,-35475,88148,76565,80071,14060};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-28209,-95568,56049,46909,1051,-92924,-81865,87742,-96366,-31184,-36458,-29274,98071,-35393,88221,76601,80151,14141};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 947;

int ret = 88151;

assertEquals(32, ret, solution.nthElement(var0, var1, var2));
}

void testCase33 () {
int _var0[] = {-27348,-82552,-46215,-98832,-99044,-59101,-67436,-17851,-85668,-81722,-79351,-98273,-58655,-94621,-41736,-57267,-97310,-86741,-94596,-96175};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-245,-49673,-40983,-3391,241,-22294,-24856,-11970,-16572,-29735,-77095,-6058,-36398,-84270,-31325,-36574,-4683,-15967,-45733,-39021};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 576461;

int ret = -42334;

assertEquals(33, ret, solution.nthElement(var0, var1, var2));
}

void testCase34 () {
int _var0[] = {10115,2482};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {63704,88432};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 131598;

int ret = 80490;

assertEquals(34, ret, solution.nthElement(var0, var1, var2));
}

void testCase35 () {
int _var0[] = {799931,-713959,-121878,-315628,-830060,-126414,92510,-653291,108308,235090,297266,760384,861282,756613,657943,410692,-127565,921817,-482296,791904,-610276,-788771,-359311,-358283,-512283,848574,225397,362343,925043,-302423,926655,-569776,244016,-197493,797725,860044,537585,-311837,-187534,-328402,-969255};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {851688,-673765,-25669,-302359,-787815,-52520,161138,-639719,158019,303273,374716,794061,930067,832108,686470,493349,-70179,948079,-475094,831781,-574005,-741138,-340479,-357224,-437112,940166,253675,368186,959900,-215915,942204,-480739,256960,-128668,831576,883211,595245,-265357,-150745,-293746,-939365};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1370941;

int ret = 662379;

assertEquals(35, ret, solution.nthElement(var0, var1, var2));
}

void testCase36 () {
int _var0[] = {-2934918,-2934921,-2934920,-2934918,-2934922,-2934922,-2934921,-2934917,-2934921,-2934919,-2934919,-2934921,-2934918,-2934921,-2934920,-2934920,-2934923,-2934920,-2934916,-2934922,-2934920,-2934919,-2934921,-2934918,-2934923,-2934921,-2934917,-2934920,-2934916,-2934919,-2934915,-2934921,-2934922,-2934920,-2934918,-2934921,-2934923,-2934921,-2934920,-2934921,-2934923,-2934921,-2934917,-2934922,-2934923,-2934923,-2934920,-2934923,-2934923,-2934922};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-2934917,-2934917,-2934916,-2934915,-2934917,-2934922,-2934919,-2934915,-2934916,-2934918,-2934918,-2934918,-2934915,-2934917,-2934915,-2934918,-2934918,-2934917,-2934915,-2934921,-2934917,-2934917,-2934917,-2934916,-2934918,-2934917,-2934917,-2934916,-2934916,-2934916,-2934915,-2934916,-2934921,-2934915,-2934916,-2934919,-2934920,-2934916,-2934915,-2934921,-2934920,-2934917,-2934915,-2934918,-2934919,-2934919,-2934920,-2934918,-2934920,-2934920};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 93;

int ret = -2934919;

assertEquals(36, ret, solution.nthElement(var0, var1, var2));
}

void testCase37 () {
int _var0[] = {1844392,1844398,1844398,1844398,1844394,1844402,1844394,1844398,1844397,1844395,1844395,1844400,1844392,1844397,1844400,1844398,1844398,1844400,1844394,1844398,1844399,1844392,1844394,1844397,1844395,1844393,1844396,1844394,1844393,1844396,1844398,1844396,1844392,1844396,1844402,1844392,1844398,1844395,1844392,1844400,1844395,1844397,1844394,1844393,1844397,1844400,1844401,1844397,1844395,1844400};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {1844392,1844402,1844399,1844398,1844397,1844402,1844395,1844398,1844397,1844397,1844395,1844402,1844396,1844401,1844400,1844399,1844398,1844401,1844396,1844402,1844402,1844392,1844396,1844398,1844398,1844396,1844399,1844397,1844397,1844399,1844399,1844400,1844396,1844398,1844402,1844395,1844400,1844398,1844392,1844402,1844398,1844397,1844394,1844393,1844401,1844402,1844401,1844400,1844398,1844400};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 63;

int ret = 1844397;

assertEquals(37, ret, solution.nthElement(var0, var1, var2));
}

void testCase38 () {
int _var0[] = {-7,-1,-6,9,0,-6,-3,-8,8,-5,-9,7,-3,-7,0,1,-7,4,5};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {1,5,3,10,5,-6,-1,1,8,3,-1,8,3,-1,4,4,-4,5,7};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 89;

int ret = 4;

assertEquals(38, ret, solution.nthElement(var0, var1, var2));
}

void testCase39 () {
int _var0[] = {-40,-63,-57,-41,-98,-91,-76,-44,-97,35,73,-63,-96,42,-65,-22,-75,31,-21,-85,-41,6,-6,67,5,-21,19,-14,20,3,-55,-65,39,-3,-76,-41,74,-76,21,-29,-50,0,-9,43,22,15};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {26,-34,-13,4,-89,-34,11,-13,-21,72,98,-30,-91,64,-4,34,-44,83,35,-43,-7,38,26,93,30,-20,94,17,37,6,-29,3,80,72,15,3,84,-8,84,23,-8,0,21,80,92,95};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 601;

int ret = -31;

assertEquals(39, ret, solution.nthElement(var0, var1, var2));
}

void testCase40 () {
int _var0[] = {446,-597,-809,915,849,-185,313,665,313,709,-396,571,810,-849,301,81,-550,517,-529,59,48,32,-956,858,146,-311,-393,-746,-733,-827,-64};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {449,-588,-809,917,852,-178,321,673,319,711,-390,574,810,-842,310,82,-545,518,-529,62,55,32,-955,866,151,-311,-387,-742,-732,-818,-57};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 64;

int ret = -181;

assertEquals(40, ret, solution.nthElement(var0, var1, var2));
}

void testCase41 () {
int _var0[] = {-9223,2423,2869,6255,-9974,-2746,-8326,-1407,857,-916,1985,-7169,-9105,1786,-4086,-2330,1972};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-9217,2426,2870,6260,-9965,-2744,-8324,-1400,860,-911,1990,-7168,-9100,1793,-4077,-2321,1974};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 86;

int ret = 2423;

assertEquals(41, ret, solution.nthElement(var0, var1, var2));
}

void testCase42 () {
int _var0[] = {-37105,-93410,-98751,59016,23791,-55524,54804};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-31626,-88080,-95681,64281,31731,-48346,56894};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 23064;

int ret = 25794;

assertEquals(42, ret, solution.nthElement(var0, var1, var2));
}

void testCase43 () {
int _var0[] = {-201772,-840721,121913,-890407,-140819,-507346,416353,534525,-809,-410292,-990500,-655411,-330417,-42563,-270478,-331838,631340,850831,-897429,298704,669066,-588219,-640500,-738197,-210630,324961,-782599,-123214,335184,790505,-342622,-715400,749707,474067,-506315,894653,-646689,-190668,881568,22949,-554975,-904271,832139,-169493,630381,683141};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-201765,-840718,121921,-890398,-140818,-507345,416355,534532,-803,-410283,-990500,-655409,-330415,-42563,-270475,-331832,631345,850838,-897428,298707,669075,-588216,-640495,-738191,-210621,324962,-782596,-123205,335192,790508,-342613,-715399,749712,474067,-506309,894655,-646689,-190668,881577,22953,-554966,-904265,832140,-169490,630385,683150};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 47;

int ret = -588219;

assertEquals(43, ret, solution.nthElement(var0, var1, var2));
}

void testCase44 () {
int _var0[] = {-4836113,5835889,3210092,962188,6357097,971135,2218399,3251535,7386788,9750414,3839756,2036160,4515868,7221768,1908596,-7231791,7973312,-5429348,-8009784,-9503889,8642364,-1283629,-787997,-1677783,-2181055,-8012317,5727778,-2461681,6062400,-2299103,9162275,-6688297,-678677,-2103133,-733150,3350920,-5839348,3297352,2274783,7800256,3079513,5615873};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-4766561,5857329,3217086,1022281,6401638,1012660,2295879,3297382,7447267,9762739,3875110,2050940,4529202,7312546,1993639,-7182569,8043738,-5392708,-7973945,-9463588,8728058,-1226583,-728282,-1613455,-2149927,-7989966,5814306,-2425412,6099036,-2269185,9261176,-6602835,-580331,-2059333,-701539,3397608,-5788582,3365210,2324487,7887922,3101660,5620734};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 376380;

int ret = -4780321;

assertEquals(44, ret, solution.nthElement(var0, var1, var2));
}

void testCase45 () {
int _var0[] = {-49234222,11169825,12038501,60082927,-15215982,78597670,-77881014,43585086,-15671583,-61866134,63972266,39911754,44953769};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-49233321,11170101,12038822,60083232,-15215268,78598481,-77880579,43585404,-15671204,-61865256,63972861,39912169,44954031};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 3614;

int ret = 12038526;

assertEquals(45, ret, solution.nthElement(var0, var1, var2));
}

void testCase46 () {
int _var0[] = {538321916,-689731366,454771707,2055025,543131390,161203629,159060512,781433620,912669145,-292617154,-77729378,-768759638,886050888,-635963786,58392177,-988465479,-256451905,156516078,27417155,-606117739,208192002,691405454,-724295971,-201246669,610818573,-335812782,536191246,-965872438,735273818,-556948536,-660019560,310033090};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {538328488,-689723110,454776568,2063464,543138989,161208818,159068943,781439391,912676662,-292612312,-77726297,-768758613,886057703,-635961654,58401576,-988462241,-256451093,156525708,27421164,-606110925,208199719,691414553,-724289760,-201237667,610826865,-335808590,536194626,-965871261,735274035,-556943767,-660018038,310039700};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 57247;

int ret = 2055185;

assertEquals(46, ret, solution.nthElement(var0, var1, var2));
}

void testCase47 () {
int _var0[] = {-909178048,-660889327,-1196849142,1155293058,542452752,1560390648,-422586009,-794133012,-735440043,232178708,-1029833910,-1477040819,82704669,1901204263,-405220410,-148547439,-351545686,-472040482,578641950,-111531759,293176057,-1617751148,-962145925,804804001,-105999462,463884154,-782641055,-1897342659,-1102255284,-312673986,-1948540973,-1567872146,81892427,-1432247460,-427337879,-187807550,-507744895,773149004,935319207,850149545,540682159};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-761147059,601593256,688734416,1590600986,1247134734,1605786106,82265992,618282297,281341438,771578060,849748309,-1229953810,1417531625,1991504901,308098702,682268499,860712832,752407016,1483196887,50218060,427352074,-306133378,102661642,1254430184,1890974178,585054231,-522199785,-1209923650,179638677,523521187,-1774392226,64170285,1860240258,-1084096719,809607378,1173866211,266055415,1229830817,1320716582,1989935983,783352617};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 889718319;

int ret = -1461109301;

assertEquals(47, ret, solution.nthElement(var0, var1, var2));
}

void testCase48 () {
int _var0[] = {163915444,756037284,-1294541118,185286048,-449930293,-1288770528,-904938119,-1220977849,-1326332078,341858123,150604025,452187481,-79832203,-1712129215,-207297885,-861863173,-653372853,-360973696,838189780,-722014819,-1748052607,-1787598628,-1939076671,-645836021,-1753994168,-1553459459,31842896,17721220,196841670,1718948072,-51499025,1011419194,913693244,1020335131,-1499573803,1098312430,-644159205,-1802911611,-1885525988};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {1414026705,1084916730,-612551585,1571784234,557022199,-183261909,352601054,453695143,-199552055,1198754344,1221406876,1532078438,1523648431,-1296467698,891116787,217758608,565577473,906190618,1063077639,296815438,-503967695,-1423385576,-906779797,1040205509,-626777003,-519218426,1121029633,1372591233,1385390666,1900087531,1582133396,1158576770,1118785920,1303957462,-19094257,1475509802,-634750820,-1500449884,112580815};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 448031488;

int ret = -1744854698;

assertEquals(48, ret, solution.nthElement(var0, var1, var2));
}

void testCase49 () {
int _var0[] = {-906223108,-199346937,1091565707,-1032193712,-993742853,1044045060,519719979,-1117688378,-1100478815,396337472,454313795};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-809432260,951409267,1925253916,-697987685,366272546,1144862322,1869974944,-380205687,-323155176,1568254767,1299991395};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 58990784;

int ret = -1079588205;

assertEquals(49, ret, solution.nthElement(var0, var1, var2));
}

void testCase50 () {
int _var0[] = {-156815210,-838930843,539042779,625135587,-634797978,-1562924851,-1368108669};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {526658091,156523276,1539551044,896902268,955408445,-263089377,585273231};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1748788808;

int ret = -673725185;

assertEquals(50, ret, solution.nthElement(var0, var1, var2));
}

void testCase51 () {
int _var0[] = {-1453768337,-254891564,-354611180,-498397140,-115837366,-185251455,1423106204,818045562,-447758435,-1627443864,-1303629928,101297104,-102261205,-1548881575,-765134205,-755386624,-569944554,1040862692,-1060776952,-1692586940};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {-922015139,792620694,276617281,961960312,31408852,1464404629,1684692982,1981898456,1279286563,-1014014241,522261660,1813706615,1112996296,138698102,1031671354,726881239,1247880475,1608773283,-689225126,-357771713};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1620020831;

int ret = -1201257963;

assertEquals(51, ret, solution.nthElement(var0, var1, var2));
}

void testCase52 () {
int _var0[] = {6,3,8,9,5,0,3,7,2,9,6,-1,0,6,0,5,4,5,2,2,1,6};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {6,3,8,9,5,0,3,7,2,9,6,-1,0,6,0,5,4,5,2,2,1,6};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 3;

int ret = 0;

assertEquals(52, ret, solution.nthElement(var0, var1, var2));
}

void testCase53 () {
int _var0[] = {35,9,-10,1,8,-3,61,20,13,32,56,-7,47,18};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {94,45,-6,55,100,55,62,29,22,78,99,63,87,77};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 584;

int ret = 95;

assertEquals(53, ret, solution.nthElement(var0, var1, var2));
}

void testCase54 () {
int _var0[] = {172,-3,4,622,851,17,68,-3,313,583,140,342,569,141,63,-3,118,36,652,168,135,213,-8,68,86,472,49,53,68,469,344,689,401,148};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {984,790,982,777,875,992,722,941,619,963,903,907,961,360,847,933,940,153,751,754,854,928,591,899,961,817,65,601,1000,618,405,931,439,997};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 5774;

int ret = 360;

assertEquals(54, ret, solution.nthElement(var0, var1, var2));
}

void testCase55 () {
int _var0[] = {4617,4506,3032,6296,8186,1427,5869,4729,5924,3516,3827,4970,8759,9034,1540,2363,4498,2914,3107,7232,1431,2691,5345,3536,1162,6470,717,7534,6876,8012,7568,-79,2904,8363,7119,8456,4505,6181,5789};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {5545,5171,3508,6482,8936,1619,6816,4823,6885,3992,4099,5834,9307,9702,2527,2371,5441,3873,3227,8224,2117,3231,6232,3823,1298,6514,1210,8085,7089,8825,8499,281,3464,8528,7870,9243,4907,6457,6311};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 5339;

int ret = 3578;

assertEquals(55, ret, solution.nthElement(var0, var1, var2));
}

void testCase56 () {
int _var0[] = {32052,72683,3926,62372,56944,63074,32099,8201,62474,21323,36284,32282,70945,52411,50250,17435,91621,82798,86309,17756,10645,13413,18221,79742,81101,41081,31792,48370,44277,49719,15257,72666,9135,48548,25409,1639,28250,31405,41171,20536,85665,53599,50799};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {32684,73019,3989,62615,57588,63741,32162,9118,63170,22210,36587,32992,71324,53375,50653,17862,92199,82909,86477,18102,11333,14376,18904,80237,81109,41559,32267,49114,44763,50202,16241,73261,9310,48713,26255,1641,28643,32185,41538,21312,86401,53884,51772};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 15623;

int ret = 52794;

assertEquals(56, ret, solution.nthElement(var0, var1, var2));
}

void testCase57 () {
int _var0[] = {638864,516297,915175,948228,9492,586538,693502,521049,195085,312225,110692,905664};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {645214,520591,922689,957448,13523,588737,701070,524407,195511,320435,115529,909926};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 31387;

int ret = 642889;

assertEquals(57, ret, solution.nthElement(var0, var1, var2));
}

void testCase58 () {
int _var0[] = {5240171,6672255,5624981};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {5246672,6682225,5625409};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 15484;

int ret = 6680808;

assertEquals(58, ret, solution.nthElement(var0, var1, var2));
}

void testCase59 () {
int _var0[] = {27376211,46923877,27353853,31460980,8442437,5918796,65845456,4487693,56763282,20463427,39833859,31243940,1542503,23806346,10303393,32023300,11986114,9452,5707373,23132078,5550939,5792451,15724266,67189805,32345025,6000474,9661891,13939353,4713990,12469656,20920500,32625379,5404923,1345440,22609000,39499381,35858319,21944531,2499059,7128506,17661211,7646647,35231962,33037604,51631443,6098891,76771079,44765443,13350948,21551261};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {91062511,84957758,66962172,93881271,70344617,92915371,93230349,99736910,83535820,36476125,96621915,79634174,88590040,43237998,70402563,48528487,94325620,97179151,74557917,62145314,18511037,97425361,66443959,96522197,64547223,93250075,13366487,88347594,92634899,93725190,92445896,69571696,88126585,68931592,79939258,44544209,54240158,91936570,80919946,60902106,83548671,96359688,72698987,91912813,96359136,40736526,88053888,83058076,54154669,69614447};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 497447201;

int ret = 27681073;

assertEquals(59, ret, solution.nthElement(var0, var1, var2));
}

void testCase60 () {
int _var0[] = {859558895,85614046,725716557,92793907};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {860173933,85704336,725836418,93382737};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1271767;

int ret = 860031678;

assertEquals(60, ret, solution.nthElement(var0, var1, var2));
}

void testCase61 () {
int _var0[] = {-1500000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {1500000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1500000091;

int ret = 91;

assertEquals(61, ret, solution.nthElement(var0, var1, var2));
}

void testCase62 () {
int _var0[] = {1,3};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {4,5};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 3;

int ret = 3;

assertEquals(62, ret, solution.nthElement(var0, var1, var2));
}

void testCase63 () {
int _var0[] = {};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,0,2000000000,2000000000,2000000000,2000000000,57483902,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1999938475;

int ret = -1958334616;

assertEquals(63, ret, solution.nthElement(var0, var1, var2));
}

void testCase64 () {
int _var0[] = {-2000000000,-2000000000,-1999999999,-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000,2000000000,1999999999};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = -1500000000;

assertEquals(64, ret, solution.nthElement(var0, var1, var2));
}

void testCase65 () {
int _var0[] = {1,2,3,1,3,1};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {4,5,3,6,3,1000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 700;

int ret = 685;

assertEquals(65, ret, solution.nthElement(var0, var1, var2));
}

void testCase66 () {
int _var0[] = {-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2333323;

int ret = -1997666677;

assertEquals(66, ret, solution.nthElement(var0, var1, var2));
}

void testCase67 () {
int _var0[] = {-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000,2000000000,2000000000,2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = -1666666667;

assertEquals(67, ret, solution.nthElement(var0, var1, var2));
}

void testCase68 () {
int _var0[] = {-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = -1750000000;

assertEquals(68, ret, solution.nthElement(var0, var1, var2));
}

void testCase69 () {
int _var0[] = {1,5};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {3,7};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 4;

int ret = 6;

assertEquals(69, ret, solution.nthElement(var0, var1, var2));
}

void testCase70 () {
int _var0[] = {1999999999,1999999997,15,1999999998,-10000,-1999999999,1000,-1000,34,1999999999,1999999997,15,1999999998,-10000,-1999999999,1000,-1000,34,1999999999,1999999997,15,1999999998,-10000,-1999999999,1000,-1000,34};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {1999999999,1999999999,51,1999999999,200000,-1999999997,1000000000,1999999,34543,1999999999,1999999999,51,1999999999,200000,-1999999997,1000000000,1999999,34543,1999999999,1999999999,51,1999999999,200000,-1999999997,1000000000,1999999,34543};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 193969;

int ret = 13662;

assertEquals(70, ret, solution.nthElement(var0, var1, var2));
}

void testCase71 () {
int _var0[] = {1,1};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {1000000,1000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 50000;

int ret = 25001;

assertEquals(71, ret, solution.nthElement(var0, var1, var2));
}

void testCase72 () {
int _var0[] = {100,1000,-1000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {10000000,10000000,-1};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000;

int ret = 1050;

assertEquals(72, ret, solution.nthElement(var0, var1, var2));
}

void testCase73 () {
int _var0[] = {-1500000000,-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {1500000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1999999999;

int ret = -750000001;

assertEquals(73, ret, solution.nthElement(var0, var1, var2));
}

void testCase74 () {
int _var0[] = {-2000000000,-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1000000;

int ret = -1999500000;

assertEquals(74, ret, solution.nthElement(var0, var1, var2));
}

void testCase75 () {
int _var0[] = {-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = 0;

assertEquals(75, ret, solution.nthElement(var0, var1, var2));
}

void testCase76 () {
int _var0[] = {-999888777,-99898,-99,8};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {1000000000,12457,-27,100};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1000100100;

int ret = 98801;

assertEquals(76, ret, solution.nthElement(var0, var1, var2));
}

void testCase77 () {
int _var0[] = {-15000000,-20};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {20,1500000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 15000030;

int ret = 5;

assertEquals(77, ret, solution.nthElement(var0, var1, var2));
}

void testCase78 () {
int _var0[] = {-2000000000,-2000000000,-2000000000,-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000,2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = -1500000000;

assertEquals(78, ret, solution.nthElement(var0, var1, var2));
}

void testCase79 () {
int _var0[] = {-1000000000,-100000000,-1000000,-100000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {100000000,1000000000,1000000,100000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 100000000;

int ret = -900000000;

assertEquals(79, ret, solution.nthElement(var0, var1, var2));
}

void testCase80 () {
int _var0[] = {1,3,1,2,3,4,5,6,7,8,9,10};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {4,5,2000000000,1999999999,1999999998,1999999997,1999999996,1000000000,500000000,32947235,1247869823,54878453};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = 239021794;

assertEquals(80, ret, solution.nthElement(var0, var1, var2));
}

void testCase81 () {
int _var0[] = {-1000000,0};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000,0};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2001101;

int ret = 1001100;

assertEquals(81, ret, solution.nthElement(var0, var1, var2));
}

void testCase82 () {
int _var0[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2,34,4,4,5342,32,32,5,34,5324,5,435,321,4312,5,1466,434334,6543,434343,36,1,65,14435435,324,4343,4323243,32424243,2342342,34,2,253,43,25,43,5642,5,34,434343,34,3,4,434343,4,4,4,4,4,34444444,444444,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = 0;

assertEquals(82, ret, solution.nthElement(var0, var1, var2));
}

void testCase83 () {
int _var0[] = {-2000000000,-2000000000,-2000000000,-2000000000,-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000,2000000000,2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = -1600000000;

assertEquals(83, ret, solution.nthElement(var0, var1, var2));
}

void testCase84 () {
int _var0[] = {1,3};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {10,7};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 9;

int ret = 6;

assertEquals(84, ret, solution.nthElement(var0, var1, var2));
}

void testCase85 () {
int _var0[] = {-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000,-2000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = -1875000000;

assertEquals(85, ret, solution.nthElement(var0, var1, var2));
}

void testCase86 () {
int _var0[] = {-1000000000,-1000000000,-1000000000,-1000000000,-1000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {1000000000,1000000000,1000000000,1000000000,1000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1999999999;

int ret = -600000001;

assertEquals(86, ret, solution.nthElement(var0, var1, var2));
}

void testCase87 () {
int _var0[] = {-2000000,-2000000,-2000000,-2000000,-2000000,-2000000,-2000000,-2000000,-2000000,-2000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 19999999;

int ret = -1;

assertEquals(87, ret, solution.nthElement(var0, var1, var2));
}

void testCase88 () {
int _var0[] = {100,200,300,400,500,600,-1000000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {100,200,300,400,500,600,1000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = 999999994;

assertEquals(88, ret, solution.nthElement(var0, var1, var2));
}

void testCase89 () {
int _var0[] = {1,1,1,1,1};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {3,1,1,1,1};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 5;

int ret = 2;

assertEquals(89, ret, solution.nthElement(var0, var1, var2));
}

void testCase90 () {
int _var0[] = {-1999999999,-1999999999,-1999999999,-1999999999,-1999999999,-1999999999,-1999999999,-1999999999,-1999999999,-1999999999,-1999999999,-1999999999,-1999999999,-1999999999,-1999999999};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1999999999};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 1999999998;

int ret = -1866666666;

assertEquals(90, ret, solution.nthElement(var0, var1, var2));
}

void testCase91 () {
int _var0[] = {1,1};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {3,3};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2;

int ret = 2;

assertEquals(91, ret, solution.nthElement(var0, var1, var2));
}

void testCase92 () {
int _var0[] = {1,3};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {5,7};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 9;

int ret = 7;

assertEquals(92, ret, solution.nthElement(var0, var1, var2));
}

void testCase93 () {
int _var0[] = {-2000000000,-1000000000,-100000000};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,-100,2000000000};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 90000000;

int ret = -1910000000;

assertEquals(93, ret, solution.nthElement(var0, var1, var2));
}

void testCase94 () {
int _var0[] = {-2000000000,-1999999999,-1999999998,-1999999997};
vector <int> var0 (_var0, _var0 + (sizeof(_var0) / sizeof(_var0[0])));

int _var1[] = {2000000000,1999999999,1999999998,1999999997};
vector <int> var1 (_var1, _var1 + (sizeof(_var1) / sizeof(_var1[0])));

int var2 = 2000000000;

int ret = -1499999999;

assertEquals(94, ret, solution.nthElement(var0, var1, var2));
}
	
    public: void runTest(int testCase) {
		double tempo;
		clock_t Begin, End;
		   
		Begin = clock();    
		switch (testCase) {
			
		case(0): testCase0(); break;
		case(1): testCase1(); break;
		case(2): testCase2(); break;
		case(3): testCase3(); break;
		case(4): testCase4(); break;
		case(5): testCase5(); break;
		case(6): testCase6(); break;
		case(7): testCase7(); break;
		case(8): testCase8(); break;
		case(9): testCase9(); break;
		case(10): testCase10(); break;
		case(11): testCase11(); break;
		case(12): testCase12(); break;
		case(13): testCase13(); break;
		case(14): testCase14(); break;
		case(15): testCase15(); break;
		case(16): testCase16(); break;
		case(17): testCase17(); break;
		case(18): testCase18(); break;
		case(19): testCase19(); break;
		case(20): testCase20(); break;
		case(21): testCase21(); break;
		case(22): testCase22(); break;
		case(23): testCase23(); break;
		case(24): testCase24(); break;
		case(25): testCase25(); break;
		case(26): testCase26(); break;
		case(27): testCase27(); break;
		case(28): testCase28(); break;
		case(29): testCase29(); break;
		case(30): testCase30(); break;
		case(31): testCase31(); break;
		case(32): testCase32(); break;
		case(33): testCase33(); break;
		case(34): testCase34(); break;
		case(35): testCase35(); break;
		case(36): testCase36(); break;
		case(37): testCase37(); break;
		case(38): testCase38(); break;
		case(39): testCase39(); break;
		case(40): testCase40(); break;
		case(41): testCase41(); break;
		case(42): testCase42(); break;
		case(43): testCase43(); break;
		case(44): testCase44(); break;
		case(45): testCase45(); break;
		case(46): testCase46(); break;
		case(47): testCase47(); break;
		case(48): testCase48(); break;
		case(49): testCase49(); break;
		case(50): testCase50(); break;
		case(51): testCase51(); break;
		case(52): testCase52(); break;
		case(53): testCase53(); break;
		case(54): testCase54(); break;
		case(55): testCase55(); break;
		case(56): testCase56(); break;
		case(57): testCase57(); break;
		case(58): testCase58(); break;
		case(59): testCase59(); break;
		case(60): testCase60(); break;
		case(61): testCase61(); break;
		case(62): testCase62(); break;
		case(63): testCase63(); break;
		case(64): testCase64(); break;
		case(65): testCase65(); break;
		case(66): testCase66(); break;
		case(67): testCase67(); break;
		case(68): testCase68(); break;
		case(69): testCase69(); break;
		case(70): testCase70(); break;
		case(71): testCase71(); break;
		case(72): testCase72(); break;
		case(73): testCase73(); break;
		case(74): testCase74(); break;
		case(75): testCase75(); break;
		case(76): testCase76(); break;
		case(77): testCase77(); break;
		case(78): testCase78(); break;
		case(79): testCase79(); break;
		case(80): testCase80(); break;
		case(81): testCase81(); break;
		case(82): testCase82(); break;
		case(83): testCase83(); break;
		case(84): testCase84(); break;
		case(85): testCase85(); break;
		case(86): testCase86(); break;
		case(87): testCase87(); break;
		case(88): testCase88(); break;
		case(89): testCase89(); break;
		case(90): testCase90(); break;
		case(91): testCase91(); break;
		case(92): testCase92(); break;
		case(93): testCase93(); break;
		case(94): testCase94(); break;
			default: cerr << "No such test case: " << testCase << endl; exit (1);
		}
		End = clock();
		tempo = (double) (End - Begin) / CLOCKS_PER_SEC;
		
		printf (" in %.4lfs\n", tempo);
	}

};

bool UnionOfIntervalsTest::passed;

int main(int argc, char *argv[]) {
	int cnt = 0, cntAc = 0, caso = -1;
	bool passedAll = true;
	
	if (argc > 1) {
		caso = atoi (argv[1]);
		if (caso == 95)
			return 100;
	}
	
    for (int i = 0; i < 95; i++) {
    	if (caso != -1 && caso != i) continue;
    	
		cnt++;
		UnionOfIntervalsTest *test = new UnionOfIntervalsTest ();
		test->runTest(i);
		passedAll &= UnionOfIntervalsTest::passed;
		if (UnionOfIntervalsTest::passed) cntAc++;
    }
    if (caso == -1) {
		if (passedAll) {
    		cout << "You've got AC! (" << cnt << "/" << cntAc << ")" << endl;
    	} else {
 	   		cout << "You've got WA! (" << cnt << "/" << cntAc << ")" << endl;
    	}
    }
    return 0;	
}
